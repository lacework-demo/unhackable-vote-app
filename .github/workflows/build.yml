name: build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  voteapp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build voteapp-website and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: apps/vote/
          file: apps/vote/Dockerfile
          load: true
          tags: |
            voteapp-website:latest
            public.ecr.aws/${{ secrets.ECR_NAME_NAMESPACE }}/voteapp-website:latest
            ${{ steps.login-ecr.outputs.registry }}/voteapp-website:latest

      # - uses: lacework/lw-scanner-action@v0.6.0
      #   name: Scan contacts container image for vulnerabitilies using Lacework
      #   with:
      #     USE_POLICY: true
      #     LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
      #     LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
      #     IMAGE_NAME: voteapp-website
      #     IMAGE_TAG: latest

      - name: Build, tag, and push voteapp-website to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: voteapp-website
          IMAGE_TAG:  latest
        run: |
          docker push $ECR_REGISTRY/${{ secrets.ECR_NAME_NAMESPACE }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build voteapp-results-site and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: apps/result/
          file: apps/result/Dockerfile
          load: true
          tags: |
            voteapp-results-site:latest
            public.ecr.aws/${{ secrets.ECR_NAME_NAMESPACE }}/voteapp-results-site:latest
            ${{ steps.login-ecr.outputs.registry }}/voteapp-results-site:latest

      # - uses: lacework/lw-scanner-action@v0.6.0
      #   name: Scan contacts container image for vulnerabitilies using Lacework
      #   with:
      #     USE_POLICY: true
      #     LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
      #     LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
      #     IMAGE_NAME: voteapp-results-site
      #     IMAGE_TAG: latest

      - name: Build, tag, and push voteapp-results-site to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: voteapp-results-site
          IMAGE_TAG:  latest
        run: |
          docker push $ECR_REGISTRY/${{ secrets.ECR_NAME_NAMESPACE }}/$ECR_REPOSITORY:$IMAGE_TAG

  publish-worker-to-s3:
    name: upload-s3
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: zip worker dir into tmp folder
        run: cd apps/worker; zip -r -q /tmp/voteapp-worker.zip .

      - name: configure aws creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: upload artifacts to s3
        run: aws s3 cp /tmp/voteapp-worker.zip s3://${{ secrets.AWS_BUCKET }}